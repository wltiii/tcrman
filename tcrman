#!/usr/bin/env bash
#
# performs initial installation of tcrman into a project
#
echo 'tcrman - (test && commit) || revert variant manager'
echo -e "\tCopyright © 2019 William Lodge Turner III"

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]
then
  echo "========================================================"
  echo "ERROR - You must be running bash version 4.0 or higher."
  echo "========================================================"
  echo "Your version is:"
  echo "bash --version $(bash --version)"
  exit
fi

echo

# options from command override options from config
BUILD_OPT=""
TEST_OPT=""
VCS_OPT=""
TCR_OPT=""
WATCH_OPT=""

#Help function
function HELP {
    echo -e "NAME"
    echo -e "\ttcrman - (test && commit) || revert variant manager"
    echo -e "SYNOPSIS"
    echo -e "\ttcrman [OPTION]"
    echo -e "DESCRIPTION"
    echo -e "\tInstalls tcr and manages variants."
    echo -e ""
    echo -e "\t-i"
    echo -e "\t\tInstall tcr into project. Uses default tools if none specified."
    echo -e "\t-s"
    echo -e "\t\tShows configuration of current setup."
    echo -e "\t-b"
    echo -e "\t\tBuild tool commands to use."
    echo -e "\t-t"
    echo -e "\t\tTest tool commands to use."
    echo -e "\t-v"
    echo -e "\t\tVersion control tool commands to use."
    echo -e "\t-x"
    echo -e "\t\tThe tcr variant to use."
    echo -e "\t-h"
    echo -e "\t\tDisplay this help and exit."

    echo -e "AUTHOR"
    echo -e "\tWritten by Bill Turner."

    echo -e "REPORTING BUGS"
    echo -e "\tSee https://github.com/wltiii/tcrman"

    echo -e "COPYRIGHT"
    echo -e "\tCopyright © 2019 William Lodge Turner III"
    echo -e "\tLicense GPLv3+: GNU GPL version 3 or later."
    echo -e "\t<http://gnu.org/licenses/gpl.html>."
    echo -e "\tThis is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law."
    
    exit 1
}

isHomeDefined() {
    if [[ -z $TCRMAN_HOME ]]
    then
        echo -e "Environment variable TCRMAN_HOME must be defined to continue."
        exit 1
    fi

    if [ ! -f $TCRMAN_HOME/tcrman ]; then
        echo -e 'TCRMAN_HOME does not point to a valid directory. The directory must contain the tcrman script.'
        exit 1
    fi
}

showCurrentConfig() {
    echo -e "Current tcr configuration:"
    echo -e "\tbuild automation: " $BUILD_OPT
    echo -e "\ttest: " $TEST_OPT
    echo -e "\tversion control: " $VCS_OPT
    echo -e "\ttcr variant:" $TCR_OPT
    echo -e "\twatch:" $WATCH_OPT
    echo -e ""
}

showOptions() {
    index=1

    for arg in "$@"
    do
        echo -e "\t${index}. ${arg}"
        let "index++"
    done
    echo -e ""
}

showBuildOptions() {
    echo "Valid build options:"

    showOptions `\ls $TCRMAN_HOME/scripts/buildTools`
}

showTestOptions() {
    echo "Valid test options:"

    showOptions `\ls $TCRMAN_HOME/scripts/testTools`
}

showVcsOptions() {
    echo "Valid vcs options:"

    showOptions `\ls $TCRMAN_HOME/scripts/vcsTools`
}

showTcrVariants() {
    echo "Valid tcr variants:"

    showOptions `\ls $TCRMAN_HOME/variants`
}

show() {
    loadConfig
    showCurrentConfig
    showBuildOptions
    showTestOptions
    showVcsOptions
    showTcrVariants
    exit 0
}

setBuild() {
    echo -e "configuring build automation to: " $BUILD_OPT  &>>./tcrman/tcrman.log

    if [ ! -f $TCRMAN_HOME/scripts/buildTools/$BUILD_OPT/build ]; then
        echo -e 'Build automation tool '${BUILD_OPT}' is invalid.'
        echo -e 'Build automation tool '${BUILD_OPT}' is invalid.' &>>./tcrman/tcrman.log
        showBuildOptions
        exit 1
    fi

    ln -sfv $TCRMAN_HOME/scripts/buildTools/$BUILD_OPT/build ./tcrman/build &>>./tcrman/tcrman.log
    chmod u+x ./tcrman/build &>>./tcrman/tcrman.log
}

setTest() {
    echo -e "configuring test command to use: " $TEST_OPT &>>./tcrman/tcrman.log
    
    if [ ! -f $TCRMAN_HOME/scripts/testTools/$TEST_OPT/test ]; then
        echo -e 'Test automation tool '${TEST_OPT}' is invalid.'
        echo -e 'Test automation tool '${TEST_OPT}' is invalid.' &>>./tcrman/tcrman.log
        showTestOptions
        exit 1
    fi

    ln -sfv $TCRMAN_HOME/scripts/testTools/$TEST_OPT/test ./tcrman/test &>>./tcrman/tcrman.log
    chmod u+x ./tcrman/test &>>./tcrman/tcrman.log
}

setVcs() {
    echo -e "configuring version control system to use: " $VCS_OPT  &>>./tcrman/tcrman.log
    
    if [ ! -f $TCRMAN_HOME/scripts/vcsTools/$VCS_OPT/commit ]; then
        echo -e 'Version control tool '${VCS_OPT}' is invalid.'
        echo -e 'Version control tool '${VCS_OPT}' is invalid.' &>>./tcrman/tcrman.log
        showTestOptions
        exit 1
    fi

    ln -sfv $TCRMAN_HOME/scripts/vcsTools/$VCS_OPT/commit ./tcrman/commit &>>./tcrman/tcrman.log
    chmod u+x ./tcrman/commit &>>./tcrman/tcrman.log
    ln -sfv $TCRMAN_HOME/scripts/vcsTools/$VCS_OPT/revert-all ./tcrman/revert-all &>>./tcrman/tcrman.log
    chmod u+x ./tcrman/revert-all &>>./tcrman/tcrman.log
    ln -sfv $TCRMAN_HOME/scripts/vcsTools/$VCS_OPT/revert-source ./tcrman/revert-source &>>./tcrman/tcrman.log
    chmod u+x ./tcrman/revert-source &>>./tcrman/tcrman.log
}

setTcrVariant() {
    echo -e "configuring tcr variant to use: " $TCR_OPT &>>./tcrman/tcrman.log
    
    if [ ! -f $TCRMAN_HOME/variants/$TCR_OPT ]; then
        echo -e 'TCR variant '${TCR_OPT}' is invalid.'
        echo -e 'TCR variant '${TCR_OPT}' is invalid.' &>>./tcrman/tcrman.log
        showTcrVariants
        exit 1
    fi

    ln -sfv $TCRMAN_HOME/variants/$TCR_OPT ./tcrman/tcr &>>./tcrman/tcrman.log
    ln -sfv ./tcrman/tcr ./tcr &>>./tcrman/tcrman.log
    chmod u+x tcr
}

setWatcher() {
    echo -e "configuring watcher to: " $WATCH_OPT &>>./tcrman/tcrman.log
    
    if [ "$WATCH_OPT" = "y" ]; then
        ln -sfv $TCRMAN_HOME/bin/watcher ./tcr &>>./tcrman/tcrman.log
    fi
}

configure() {
    setBuild
    setTest
    setVcs
    setTcrVariant
    setWatcher
}

createDefaultConfig() {
    echo -e "createDefaultConfig()" &>>./tcrman/tcrman.log

    if [ ! -f "./tcrman/default.config" ]; then
        ln -sfv $TCRMAN_HOME/config/default.config ./tcrman/default.config &>>./tcrman/tcrman.log
    fi
    if [ ! -f "./tcrman/tcrman.config" ]; then
        cp ./tcrman/default.config ./tcrman/tcrman.config &>>./tcrman/tcrman.log
    fi
}

loadConfig() {
    echo -e "loadConfig()" &>>./tcrman/tcrman.log

    OLDIFS=$IFS
    IFS="="
    while read -r name value
    do
        opt=$name
        optval=$value
        case $opt in
            BUILD_OPT)
                if [ -z $BUILD_OPT ]; then
                    BUILD_OPT=$optval
                fi
                ;;
            TEST_OPT)
                if [ -z $TEST_OPT ]; then
                    TEST_OPT=$optval
                fi
                ;;
            VCS_OPT)
                if [ -z $VCS_OPT ]; then
                    VCS_OPT=$optval
                fi
                ;;
            TCR_OPT)
                if [ -z $TCR_OPT ]; then
                    TCR_OPT=$optval
                fi
                ;;
            WATCH_OPT)
                if [ -z $WATCH_OPT ]; then
                    WATCH_OPT=$optval
                fi
                ;;
        esac
    done < ./tcrman/tcrman.config  
    IFS=$OLDIFS  
}

saveConfig() {
    echo -e "saveConfig()" &>>./tcrman/tcrman.log

    echo -e "BUILD_OPT=$BUILD_OPT" > ./tcrman/tcrman.config
    echo -e "TEST_OPT=$TEST_OPT" >> ./tcrman/tcrman.config
    echo -e "VCS_OPT=$VCS_OPT" >> ./tcrman/tcrman.config
    echo -e "TCR_OPT=$TCR_OPT" >> ./tcrman/tcrman.config
    echo -e "WATCH_OPT=$WATCH_OPT" >> ./tcrman/tcrman.config
}

init() {
    if [ ! -d "./tcrman" ]; then
        mkdir ./tcrman
    fi

    createDefaultConfig
    loadConfig
    saveConfig
}

install() {
    isHomeDefined
    init

    echo "###################"  &>>./tcrman/tcrman.log
    echo "# TCRMAN starting #"  &>>./tcrman/tcrman.log
    echo "###################"  &>>./tcrman/tcrman.log
    
    showCurrentConfig
    configure
}


# process options
# TODO implement - for long options
# optspec=":hsb:t:v:w:x:-:"
optspec=":hsb:t:v:w:x:"
while getopts "$optspec" optchar; do
        case "${optchar}" in
        #TODO implement long args
        #   -)
        #     case ${OPTARG} in
        #         install)
        #         build)
        #         test)
        #         vcs)
        #         *)
        #             if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
        #                 echo "Unknown option --${OPTARG}" >&2
        #             fi
        #             ;;
          b)
            BUILD_OPT=$OPTARG
            ;;
          t)
            TEST_OPT=$OPTARG
            ;;
          v)
            VCS_OPT=$OPTARG
            ;;
          w)
            WATCH_OPT=$OPTARG
            ;;
          x)
            TCR_OPT=$OPTARG
            ;;
          h)
            HELP
            ;;
          s)
            show
            ;;
          *)
            echo -e "\nInvalid option '-${optchar}'. See below.\n"
            echo -e "\nInvalid option '-${optchar}'. See below.\n" &>>./tcrman/tcrman.log
            HELP
            ;;
        esac
done

install

shift $(($OPTIND -1))

